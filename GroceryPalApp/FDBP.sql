ALTER TABLE ITEM_INVENTORY DROP CONSTRAINT IBARCODE_FK;
ALTER TABLE ITEM_INVENTORY DROP CONSTRAINT AID_FK;

ALTER TABLE ITEM_INFO DROP CONSTRAINT TID_FK;
ALTER TABLE ITEM_INFO DROP CONSTRAINT BRAND_FK;
ALTER TABLE ITEM_INFO DROP CONSTRAINT CNO_FK;

ALTER TABLE BUDGET DROP CONSTRAINT BAID_FK;

ALTER TABLE NUTRITION_METER DROP CONSTRAINT NIBNO_FK;

ALTER TABLE MONTHLY_CONSUMPTION_REPORT DROP CONSTRAINT MCRID_FK;

DROP TABLE USER_ACCOUNT;
DROP TABLE ITEM_CATEGORY;
DROP TABLE ITEM_INVENTORY;
DROP TABLE ITEM_INFO;
DROP TABLE SHOPPING_SUGGESTION;
DROP TABLE TRACKER;
DROP TABLE BUDGET;
DROP TABLE RECIPE_DRIVEN;
DROP TABLE NUTRITION_METER;
DROP TABLE MONTHLY_CONSUMPTION_REPORT;
DROP TABLE ITEM_DICTIONARY;



CREATE TABLE USER_ACCOUNT 
(
FIRST_NAME VARCHAR(100),
LAST_NAME VARCHAR(100),
GENDER CHAR(1),
DATE_OF_BIRTH DATE,
COUNTRY VARCHAR(100),
CITY VARCHAR(100),
PHONE_NO VARCHAR(30),
USER_PASSWORD VARCHAR(100),
EMAIL_ADDRESS VARCHAR(100),
USER_ID bigint NOT NULL PRIMARY KEY
);
alter table USER_ACCOUNT add constraint pinky unique(EMAIL_ADDRESS);
CREATE TABLE ITEM_CATEGORY
(
CATEGORY_NAME VARCHAR(50),
CATEGORY_NO bigint NOT NULL PRIMARY KEY,
TEMPERATURE_INFO VARCHAR(10),
STORAGE_INFO VARCHAR(50)
);

CREATE TABLE ITEM_INVENTORY 
(
INVENTORY_BARCODE_NO VARCHAR(100),
INVENTORY_USER_ID bigint,
TOTAL_ITEM_PRICE bigint,
QUANTITY_OF_ITEM bigint,
ITEM_BUYING_DATE DATE,
PRIMARY KEY(INVENTORY_BARCODE_NO,INVENTORY_USER_ID)
);

CREATE TABLE ITEM_INFO
(
BARCODE_NO VARCHAR(100) NOT NULL PRIMARY KEY,
ITEM_NAME VARCHAR(50),
MANUFACTURED_DATE DATE,
EXPIRY_DATE DATE,
WEIGHT FLOAT(20),
DESCRIPTION VARCHAR(100),
ITEM_TRACKER_ID bigint,
PRICE bigint,
CALORIES FLOAT(10),
STORAGE_INFO VARCHAR(50),
BRAND VARCHAR(50),
CATEGORY_NO bigint
);
drop table Recipe_List;

CREATE TABLE Recipe_List
(
ITEM_NAME VARCHAR(50) NOT NULL,
DESCRIPTION VARCHAR(max),
user_id bigint NOT NULL,
Recipe_name  VARCHAR(50),
Ingredients VARCHAR (max),
EXPIRY_DATE DATE

);


CREATE TABLE SHOPPING_SUGGESTION
(
BRAND VARCHAR(50) NOT NULL PRIMARY KEY,
DISCOUNT CHAR(10),
MARKET_NAME VARCHAR(50),
MARKET_LOCATION VARCHAR(100)
);

CREATE TABLE TRACKER
(
COUNTRY VARCHAR(100),
CITY VARCHAR(100),
LOCATIONS VARCHAR(100),
TRACKER_ID bigint NOT NULL PRIMARY KEY
);

CREATE TABLE BUDGET
(
CUSTOMER_ID bigint NOT NULL UNIQUE,
ESTIMATE_BUDGET FLOAT(20),
ACTUAL_BUDGET FLOAT(20),
AVAILABLE_ITEMS VARCHAR(100)
);

CREATE TABLE RECIPE_DRIVEN
(
RECIPE_ITEM VARCHAR(100) NOT NULL PRIMARY KEY,
RECIPE_ITEMS_AMOUNT VARCHAR(1000),
RECIPE VARCHAR(1000)
);

CREATE TABLE NUTRITION_METER
(
ITEM_BARCODE_NO VARCHAR(100) NOT NULL UNIQUE,
SATURATED_FAT FLOAT(20),
SODIUM FLOAT(20),
POTASSIKUM FLOAT(20),
CARBOHYDRATE FLOAT(20),
FIBRE FLOAT(20),
IRON FLOAT(20),
SUGAR FLOAT(20),
VITAMIN CHAR(1)
);

CREATE TABLE Calorie_Calculator
(
USER_ID bigint not null,
sedentary  FLOAT(20),
lightly_active FLOAT(20),
moderatetely_active FLOAT(20),
very_active FLOAT(20),
extra_active FLOAT(20),
BMR FLOAT(20)

);
drop table Calorie_Calculator;
delete from Calorie_Calculator;
select * from Calorie_Calculator; 
CREATE TABLE MONTHLY_CONSUMPTION_REPORT
(
MCR_USER_ID bigint NOT NULL UNIQUE,
PURCHASE_DATE DATE,
BALANCE FLOAT(20),
CONSUMPTION VARCHAR(1000)
);

CREATE TABLE ITEM_DICTIONARY 
(IMAGE_ID bigint NOT NULL UNIQUE,
ITEM_NAME VARCHAR(50),
ITEM_IMG varBinary(MAX)
);

ALTER TABLE ITEM_INVENTORY ADD CONSTRAINT IBARCODE_FK FOREIGN KEY(INVENTORY_BARCODE_NO) REFERENCES ITEM_INFO(BARCODE_NO)  ; 
ALTER TABLE ITEM_INVENTORY ADD CONSTRAINT AID_FK FOREIGN KEY(INVENTORY_USER_ID) REFERENCES USER_ACCOUNT(USER_ID) INITIALLY DEFERRED DEFERRABLE; 
ALTER TABLE Calorie_Calculator ADD CONSTRAINT user_FK FOREIGN KEY(USER_ID) REFERENCES USER_ACCOUNT(USER_ID) ; 

ALTER TABLE ITEM_INFO ADD CONSTRAINT TID_FK FOREIGN KEY(ITEM_TRACKER_ID) REFERENCES TRACKER(TRACKER_ID) INITIALLY DEFERRED DEFERRABLE;  
ALTER TABLE ITEM_INFO ADD CONSTRAINT BRAND_FK FOREIGN KEY(BRAND) REFERENCES SHOPPING_SUGGESTION(BRAND) ; 
ALTER TABLE ITEM_INFO ADD CONSTRAINT CNO_FK FOREIGN KEY(CATEGORY_NO) REFERENCES ITEM_CATEGORY(CATEGORY_NO); 

ALTER TABLE BUDGET ADD CONSTRAINT BAID_FK FOREIGN KEY(CUSTOMER_ID) REFERENCES USER_ACCOUNT(USER_ID) INITIALLY DEFERRED DEFERRABLE; 

ALTER TABLE NUTRITION_METER ADD CONSTRAINT NIBNO_FK FOREIGN KEY(ITEM_BARCODE_NO) REFERENCES ITEM_INFO(BARCODE_NO) ; 

ALTER TABLE MONTHLY_CONSUMPTION_REPORT ADD CONSTRAINT MCRID_FK FOREIGN KEY(MCR_USER_ID) REFERENCES USER_ACCOUNT(USER_ID) INITIALLY DEFERRED DEFERRABLE; 

INSERT INTO USER_ACCOUNT VALUES
('NAZ','ZAHRA','F',TO_DATE('12-JAN-2017','DD-MON-YYYY'),'PAKISTAN','KARACHI','03002143284','OOP','NAZ.ZAHRA@gmail.com',1);
INSERT INTO USER_ACCOUNT VALUES
('YAMEENA', 'FATIMA', 'F', TO_DATE('07-JUN-1997', 'DD-MON-YYYY'), 'PAKISTAN', 'KARACHI', '03847293939', 'LLL', 'YAM.FATIMA@gmail.com', 2);
INSERT INTO USER_ACCOUNT VALUES
('WAN','SYED','F',TO_DATE('10-JAN-2018','DD-MON-YYYY'),'PAKISTAN','KARACHI','03007543284','OOP','WAN.SYED@gmail.com',5);
INSERT INTO USER_ACCOUNT VALUES
('SAIRA', 'SOHAIL', 'F', TO_DATE('07-OCT-1996', 'DD-MON-YYYY'), 'PAKISTAN', 'KARACHI', '03894593939', 'LLL', 'SAIRA.SOH@gmail.com', 3);

INSERT INTO ITEM_CATEGORY VALUES
('FRUIT',1,30,'FRIDGE');
INSERT INTO ITEM_CATEGORY VALUES
('vegetables',2,30,'FRIDGE');
INSERT INTO ITEM_CATEGORY VALUES
('junk food',3,25,'pantry');
INSERT INTO ITEM_CATEGORY VALUES
('detergent',4,25,'pantry');


INSERT INTO SHOPPING_SUGGESTION VALUES
('YYY',3,'HH','JJ');


INSERT INTO TRACKER VALUES
('PAK','KAR','JJ',1);

INSERT INTO ITEM_INFO VALUES
('123','ORANGE',TO_DATE('12-JAN-2017','DD-MON-YYYY'),TO_DATE('12-JAN-2017','DD-MON-YYYY'),67,'XYZZZ',1,800,60,'FRIDGE','YYY',1);

INSERT INTO ITEM_INVENTORY VALUES
('123',1,800,3,TO_DATE('12-JAN-2017','DD-MON-YYYY'));

INSERT INTO BUDGET VALUES
(1,23,32,'OO');

INSERT INTO RECIPE_DRIVEN VALUES
('VV',23,'KL');

INSERT INTO NUTRITION_METER VALUES
('123',2,3,4,5,6,7,8,9);

INSERT INTO  MONTHLY_CONSUMPTION_REPORT VALUES
(1,TO_DATE('12-JAN-2017','DD-MON-YYYY'),90,23);

DROP TABLE ITEM_HISTORY_UPDATE;

CREATE TABLE ITEM_HISTORY_UPDATE
(
BARCODE_NO NUMBER(20),
ITEM_NAME VARCHAR(100),
ITEM_PRICE NUMBER(20)
);

DROP TRIGGER BEFORE_UPDATE_ITEM;

CREATE OR REPLACE TRIGGER BEFORE_UPDATE_ITEM
BEFORE
UPDATE OF PRICE
ON ITEM_INFO
FOR EACH ROW
BEGIN 
INSERT INTO ITEM_HISTORY_UPDATE VALUES 
(:OLD.BARCODE_NO,
:OLD.ITEM_NAME,
:OLD.PRICE
);
END;

UPDATE ITEM_INFO SET PRICE=920 WHERE BARCODE_NO=123;

SELECT * FROM ITEM_INFO;
SELECT * FROM ITEM_HISTORY_UPDATE;


DROP TABLE USER_ITEM_HISTORY_UPDATE;

CREATE TABLE USER_ITEM_HISTORY_UPDATE 
(
INVENTORY_BARCODE_NO NUMBER(20),
INVENTORY_USER_ID NUMBER(20),
TOTAL_ITEM_PRICE NUMBER(20),
QUANTITY_OF_ITEM NUMBER(20)
);

DROP TRIGGER BEFORE_UPDATE_USER_ITEM;

CREATE OR REPLACE TRIGGER BEFORE_UPDATE_USER_ITEM
BEFORE
UPDATE OF TOTAL_ITEM_PRICE,QUANTITY_OF_ITEM
ON ITEM_INVENTORY
FOR EACH ROW
BEGIN 
INSERT INTO USER_ITEM_HISTORY_UPDATE VALUES 
(:OLD.INVENTORY_BARCODE_NO,
:OLD.INVENTORY_USER_ID,
:OLD.TOTAL_ITEM_PRICE,
:OLD.QUANTITY_OF_ITEM
);
END;

UPDATE ITEM_INVENTORY SET QUANTITY_OF_ITEM=10 WHERE INVENTORY_BARCODE_NO=123;

SELECT * FROM ITEM_INVENTORY;
SELECT * FROM USER_ITEM_HISTORY_UPDATE;


DROP TABLE ITEM_ADDITION_INSERT;

CREATE TABLE ITEM_ADDITION_INSERT
(
BARCODE_NO NUMBER(20) ,
ITEM_NAME VARCHAR(100),
MANUFACTURED_DATE DATE,
EXPIRY_DATE DATE,
WEIGHT FLOAT(20),
DESCRIPTION VARCHAR(100),
ITEM_TRACKER_ID NUMBER(20),
PRICE NUMBER(20),
CALORIES FLOAT(20),
STORAGE_INFO VARCHAR(100),
BRAND VARCHAR(100),
CATEGORY_NO NUMBER(20)
);

DROP TRIGGER BEFORE_ITEM_ADDITION_INSERT;

CREATE OR REPLACE TRIGGER BEFORE_ITEM_ADDITION_INSERT
BEFORE
INSERT
ON ITEM_INFO
FOR EACH ROW
BEGIN 
INSERT INTO ITEM_ADDITION_INSERT VALUES 
(:NEW.BARCODE_NO,
:NEW.ITEM_NAME,
:NEW.MANUFACTURED_DATE,
:NEW.EXPIRY_DATE,
:NEW.WEIGHT,
:NEW.DESCRIPTION,
:NEW.ITEM_TRACKER_ID,
:NEW.PRICE,
:NEW.CALORIES,
:NEW.STORAGE_INFO,
:NEW.BRAND,
:NEW.CATEGORY_NO
);
END;

INSERT INTO ITEM_INFO VALUES
(111,'CHIPS',TO_DATE('12-JAN-2017','DD-MON-YYYY'),TO_DATE('12-JAN-2017','DD-MON-YYYY'),67,'XYZZZ',1,800,60,'FRIDGE','YYY',1);

SELECT * FROM ITEM_INFO;
SELECT * FROM ITEM_ADDITION_INSERT;


DROP TABLE USER_ITEM_HISTORY_DELETE;

CREATE TABLE USER_ITEM_HISTORY_DELETE
(
INVENTORY_BARCODE_NO NUMBER(20),
INVENTORY_USER_ID NUMBER(20),
TOTAL_ITEM_PRICE NUMBER(20),
QUANTITY_OF_ITEM NUMBER(20),
ITEM_BUYING_DATE DATE
);

DROP TRIGGER AFTER_DELETE_USER_ITEM;

CREATE OR REPLACE TRIGGER AFTER_DELETE_USER_ITEM
AFTER
DELETE
ON ITEM_INVENTORY
FOR EACH ROW
BEGIN 
INSERT INTO USER_ITEM_HISTORY_DELETE VALUES 
(:OLD.INVENTORY_BARCODE_NO,
:OLD.INVENTORY_USER_ID,
:OLD.TOTAL_ITEM_PRICE,
:OLD.QUANTITY_OF_ITEM,
:OLD.ITEM_BUYING_DATE
);
END;

DELETE ITEM_INVENTORY WHERE INVENTORY_BARCODE_NO=123;

SELECT * FROM ITEM_INVENTORY;
SELECT * FROM USER_ITEM_HISTORY_DELETE;


DROP TABLE USER_BUDGET_HISTORY_UPDATE;

CREATE TABLE USER_BUDGET_HISTORY_UPDATE
(
CUSTOMER_ID NUMBER(20),
ACTUAL_BUDGET FLOAT(20),
AVAILABLE_ITEMS VARCHAR(100)
);

DROP TRIGGER AFTER_UPDATE_USER_BUDGET;

CREATE OR REPLACE TRIGGER AFTER_UPDATE_USER_BUDGET
AFTER
UPDATE OF ACTUAL_BUDGET
ON BUDGET
FOR EACH ROW
BEGIN 
INSERT INTO USER_BUDGET_HISTORY_UPDATE VALUES 
(:OLD.CUSTOMER_ID,
:OLD.ACTUAL_BUDGET,
:OLD.AVAILABLE_ITEMS
);
END;

UPDATE BUDGET SET ACTUAL_BUDGET=100 WHERE CUSTOMER_ID=1;

SELECT * FROM BUDGET;
SELECT * FROM USER_BUDGET_HISTORY_UPDATE;


DROP TABLE MCR_HISTORY;

CREATE TABLE MCR_HISTORY
(
MCR_USER_ID NUMBER(20),
PURCHASE_DATE DATE,
BALANCE FLOAT(20),
CONSUMPTION VARCHAR(100)
);

DROP TRIGGER AFTER_UPDATE_MCR;

CREATE OR REPLACE TRIGGER AFTER_UPDATE_MCR
AFTER
UPDATE OF CONSUMPTION
ON MONTHLY_CONSUMPTION_REPORT
FOR EACH ROW
BEGIN 
INSERT INTO MCR_HISTORY VALUES 
(:OLD.MCR_USER_ID,
:OLD.PURCHASE_DATE ,
:OLD.BALANCE,
:OLD.CONSUMPTION
);
END;

UPDATE MONTHLY_CONSUMPTION_REPORT SET CONSUMPTION=100 WHERE MCR_USER_ID=1;

SELECT * FROM MONTHLY_CONSUMPTION_REPORT;
SELECT * FROM MCR_HISTORY;


CREATE DIRECTORY IMGDIR AS 'C:\images\';

DROP SEQUENCE IMG_ID;

CREATE SEQUENCE img_id START WITH 1 INCREMENT BY 1 NOMAXVALUE;

create or replace
PROCEDURE image_file(pic_name varchar2) IS
file_size number;
file_ptr bfile;
file_blob blob;
begin
file_ptr:=bfilename('IMGDIR',pic_name);
dbms_lob.fileopen(file_ptr);
file_size:=dbms_lob.getlength(file_ptr);
insert into ITEM_DICTIONARY
(
IMAGE_ID,
ITEM_NAME,
ITEM_IMG
)
values
(
img_id.nextval,
pic_name,
empty_blob()
)
returning ITEM_IMG into file_blob;
dbms_lob.loadfromfile(file_blob,file_ptr,file_size);
commit;
dbms_lob.close(file_ptr);
end;

execute image_file('Rice.jpg');



select * from item_category;










